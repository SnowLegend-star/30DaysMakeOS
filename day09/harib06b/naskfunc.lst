     1 00000000                                 ;naskfunc
     2 00000000                                 ;TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]       ;设置使用指令的型号，即32位   写成INSERT了，半天没找出错误
     6 00000000                                 [BITS 32]
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                     GLOBAL _io_hlt,_io_cli,_io_sti,_io_stihlt           ;书上怎么stihlt前面少了个下划线
    11 00000000                                     GLOBAL _io_in8,_io_in16,_io_in32
    12 00000000                                     GLOBAL _io_out8,_io_out16,_io_out32
    13 00000000                                     GLOBAL _io_load_eflags,_io_store_eflags             ;函数声明前怎么都要加下划线
    14 00000000                                 	GLOBAL	_load_gdtr, _load_idtr                      ;忘记加这两行了，出大问题
    15 00000000                                 	GLOBAL  _load_cr0,_store_cr0
    16 00000000                                 	GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                     EXTERN	_inthandler21, _inthandler27, _inthandler2c
    18 00000000                                 
    19                                          [SECTION .text]         ;以下是实际的函数
    20 00000000                                 _io_hlt:
    21 00000000 F4                                  HLT
    22 00000001 C3                                  RET
    23 00000002                                 
    24 00000002                                 _io_cli:
    25 00000002 FA                                  CLI
    26 00000003 C3                                  RET
    27 00000004                                 
    28 00000004                                 _io_sti:
    29 00000004 FB                                  STI
    30 00000005 C3                                  RET
    31 00000006                                 
    32 00000006                                 _io_stihlt:
    33 00000006 FB                                  STI
    34 00000007 F4                                  HLT
    35 00000008 C3                                  RET
    36 00000009                                 
    37 00000009                                 _io_in8:
    38 00000009 8B 54 24 04                         MOV EDX,[ESP+4]
    39 0000000D B8 00000000                         MOV EAX,0
    40 00000012 EC                                  IN AL,DX
    41 00000013 C3                                  RET
    42 00000014                                 
    43 00000014                                 _io_in16:
    44 00000014 8B 54 24 04                         MOV EDX,[ESP+4]
    45 00000018 B8 00000000                         MOV EAX,0
    46 0000001D 66 ED                               IN AX,DX
    47 0000001F C3                                  RET
    48 00000020                                 
    49 00000020                                 _io_in32:
    50 00000020 8B 54 24 04                         MOV EDX,[ESP+4]
    51 00000024 B8 00000000                         MOV EAX,0
    52 00000029 66 ED                               IN AX,DX
    53 0000002B C3                                  RET
    54 0000002C                                 
    55 0000002C                                 _io_out8:
    56 0000002C 8B 54 24 04                         MOV EDX,[ESP+4]
    57 00000030 8A 44 24 08                         MOV AL,[ESP+8]
    58 00000034 EE                                  OUT DX,AL
    59 00000035 C3                                  RET
    60 00000036                                 
    61 00000036                                 _io_out16:
    62 00000036 8B 54 24 04                         MOV EDX,[ESP+4]
    63 0000003A 8B 44 24 08                         MOV EAX,[ESP+8]
    64 0000003E 66 EF                               OUT DX,AX
    65 00000040 C3                                  RET
    66 00000041                                 
    67 00000041                                 _io_out32:
    68 00000041 8B 54 24 04                         MOV EDX,[ESP+4]
    69 00000045 8A 44 24 08                         MOV AL,[ESP+8]
    70 00000049 EF                                  OUT DX,EAX
    71 0000004A C3                                  RET
    72 0000004B                                 
    73 0000004B                                 _io_load_eflags:          ;eflags是32位的，flag的扩充版
    74 0000004B 9C                                  PUSHFD                ;push flags double-word 等同于MOVE EAX,EFLAGS  指push eflags
    75 0000004C 58                                  POP EAX               ;计算机没有MOV EAX，EFLAGS这种指令
    76 0000004D C3                                  RET                   ;EAX里面的值就被看成是返回值
    77 0000004E                                 
    78 0000004E                                 _io_store_eflags:
    79 0000004E 8B 44 24 04                         MOV EAX,[ESP+4]
    80 00000052 50                                  PUSH EAX
    81 00000053 9D                                  POPFD
    82 00000054 C3                                  RET
    83 00000055                                 
    84 00000055                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    85 00000055 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    86 0000005A 66 89 44 24 06                  		MOV		[ESP+6],AX
    87 0000005F 0F 01 54 24 06                  		LGDT	[ESP+6]
    88 00000064 C3                              		RET
    89 00000065                                 
    90 00000065                                 _load_idtr:		; void load_idtr(int limit, int addr);
    91 00000065 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    92 0000006A 66 89 44 24 06                  		MOV		[ESP+6],AX
    93 0000006F 0F 01 5C 24 06                  		LIDT	[ESP+6]
    94 00000074 C3                              		RET
    95 00000075                                 
    96 00000075                                 _asm_inthandler21:
    97 00000075 06                              		PUSH	ES
    98 00000076 1E                              		PUSH	DS
    99 00000077 60                              		PUSHAD
   100 00000078 89 E0                           		MOV		EAX,ESP
   101 0000007A 50                              		PUSH	EAX
   102 0000007B 66 8C D0                        		MOV		AX,SS
   103 0000007E 8E D8                           		MOV		DS,AX
   104 00000080 8E C0                           		MOV		ES,AX
   105 00000082 E8 [00000000]                   		CALL	_inthandler21
   106 00000087 58                              		POP		EAX
   107 00000088 61                              		POPAD
   108 00000089 1F                              		POP		DS
   109 0000008A 07                              		POP		ES
   110 0000008B CF                              		IRETD
   111 0000008C                                 
   112 0000008C                                 _asm_inthandler27:
   113 0000008C 06                              		PUSH	ES
   114 0000008D 1E                              		PUSH	DS
   115 0000008E 60                              		PUSHAD
   116 0000008F 89 E0                           		MOV		EAX,ESP
   117 00000091 50                              		PUSH	EAX
   118 00000092 66 8C D0                        		MOV		AX,SS
   119 00000095 8E D8                           		MOV		DS,AX
   120 00000097 8E C0                           		MOV		ES,AX
   121 00000099 E8 [00000000]                   		CALL	_inthandler27
   122 0000009E 58                              		POP		EAX
   123 0000009F 61                              		POPAD
   124 000000A0 1F                              		POP		DS
   125 000000A1 07                              		POP		ES
   126 000000A2 CF                              		IRETD
   127 000000A3                                 
   128 000000A3                                 _asm_inthandler2c:
   129 000000A3 06                              		PUSH	ES
   130 000000A4 1E                              		PUSH	DS
   131 000000A5 60                              		PUSHAD
   132 000000A6 89 E0                           		MOV		EAX,ESP
   133 000000A8 50                              		PUSH	EAX
   134 000000A9 66 8C D0                        		MOV		AX,SS
   135 000000AC 8E D8                           		MOV		DS,AX
   136 000000AE 8E C0                           		MOV		ES,AX
   137 000000B0 E8 [00000000]                   		CALL	_inthandler2c
   138 000000B5 58                              		POP		EAX
   139 000000B6 61                              		POPAD
   140 000000B7 1F                              		POP		DS
   141 000000B8 07                              		POP		ES
   142 000000B9 CF                              		IRETD
   143 000000BA                                 
   144 000000BA                                 _load_cr0:   ;int load_cr0();
   145 000000BA 0F 20 C0                        	MOV EAX,CR0
   146 000000BD C3                              	RET
   147 000000BE                                 
   148 000000BE                                 _store_cr0:  ;void store_cr0(int cr0);
   149 000000BE 8B 44 24 04                     		MOV EAX,[ESP+4]
   150 000000C2 0F 22 C0                        		MOV CR0,EAX
   151 000000C5 C3                              		RET