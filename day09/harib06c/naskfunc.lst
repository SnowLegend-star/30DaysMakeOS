     1 00000000                                 ;naskfunc
     2 00000000                                 ;TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]       ;设置使用指令的型号，即32位   写成INSERT了，半天没找出错误
     6 00000000                                 [BITS 32]
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                     GLOBAL _io_hlt,_io_cli,_io_sti,_io_stihlt           ;书上怎么stihlt前面少了个下划线
    11 00000000                                     GLOBAL _io_in8,_io_in16,_io_in32
    12 00000000                                     GLOBAL _io_out8,_io_out16,_io_out32
    13 00000000                                     GLOBAL _io_load_eflags,_io_store_eflags             ;函数声明前怎么都要加下划线
    14 00000000                                 	GLOBAL	_load_gdtr, _load_idtr                      ;忘记加这两行了，出大问题
    15 00000000                                 	GLOBAL  _load_cr0,_store_cr0
    16 00000000                                 	GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                 	GLOBAL _memtest_sub
    18 00000000                                     EXTERN	_inthandler21, _inthandler27, _inthandler2c
    19 00000000                                 
    20                                          [SECTION .text]         ;以下是实际的函数
    21 00000000                                 _io_hlt:
    22 00000000 F4                                  HLT
    23 00000001 C3                                  RET
    24 00000002                                 
    25 00000002                                 _io_cli:
    26 00000002 FA                                  CLI
    27 00000003 C3                                  RET
    28 00000004                                 
    29 00000004                                 _io_sti:
    30 00000004 FB                                  STI
    31 00000005 C3                                  RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:
    34 00000006 FB                                  STI
    35 00000007 F4                                  HLT
    36 00000008 C3                                  RET
    37 00000009                                 
    38 00000009                                 _io_in8:
    39 00000009 8B 54 24 04                         MOV EDX,[ESP+4]
    40 0000000D B8 00000000                         MOV EAX,0
    41 00000012 EC                                  IN AL,DX
    42 00000013 C3                                  RET
    43 00000014                                 
    44 00000014                                 _io_in16:
    45 00000014 8B 54 24 04                         MOV EDX,[ESP+4]
    46 00000018 B8 00000000                         MOV EAX,0
    47 0000001D 66 ED                               IN AX,DX
    48 0000001F C3                                  RET
    49 00000020                                 
    50 00000020                                 _io_in32:
    51 00000020 8B 54 24 04                         MOV EDX,[ESP+4]
    52 00000024 B8 00000000                         MOV EAX,0
    53 00000029 66 ED                               IN AX,DX
    54 0000002B C3                                  RET
    55 0000002C                                 
    56 0000002C                                 _io_out8:
    57 0000002C 8B 54 24 04                         MOV EDX,[ESP+4]
    58 00000030 8A 44 24 08                         MOV AL,[ESP+8]
    59 00000034 EE                                  OUT DX,AL
    60 00000035 C3                                  RET
    61 00000036                                 
    62 00000036                                 _io_out16:
    63 00000036 8B 54 24 04                         MOV EDX,[ESP+4]
    64 0000003A 8B 44 24 08                         MOV EAX,[ESP+8]
    65 0000003E 66 EF                               OUT DX,AX
    66 00000040 C3                                  RET
    67 00000041                                 
    68 00000041                                 _io_out32:
    69 00000041 8B 54 24 04                         MOV EDX,[ESP+4]
    70 00000045 8A 44 24 08                         MOV AL,[ESP+8]
    71 00000049 EF                                  OUT DX,EAX
    72 0000004A C3                                  RET
    73 0000004B                                 
    74 0000004B                                 _io_load_eflags:          ;eflags是32位的，flag的扩充版
    75 0000004B 9C                                  PUSHFD                ;push flags double-word 等同于MOVE EAX,EFLAGS  指push eflags
    76 0000004C 58                                  POP EAX               ;计算机没有MOV EAX，EFLAGS这种指令
    77 0000004D C3                                  RET                   ;EAX里面的值就被看成是返回值
    78 0000004E                                 
    79 0000004E                                 _io_store_eflags:
    80 0000004E 8B 44 24 04                         MOV EAX,[ESP+4]
    81 00000052 50                                  PUSH EAX
    82 00000053 9D                                  POPFD
    83 00000054 C3                                  RET
    84 00000055                                 
    85 00000055                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    86 00000055 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    87 0000005A 66 89 44 24 06                  		MOV		[ESP+6],AX
    88 0000005F 0F 01 54 24 06                  		LGDT	[ESP+6]
    89 00000064 C3                              		RET
    90 00000065                                 
    91 00000065                                 _load_idtr:		; void load_idtr(int limit, int addr);
    92 00000065 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 0000006A 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 0000006F 0F 01 5C 24 06                  		LIDT	[ESP+6]
    95 00000074 C3                              		RET
    96 00000075                                 
    97 00000075                                 _asm_inthandler21:
    98 00000075 06                              		PUSH	ES
    99 00000076 1E                              		PUSH	DS
   100 00000077 60                              		PUSHAD
   101 00000078 89 E0                           		MOV		EAX,ESP
   102 0000007A 50                              		PUSH	EAX
   103 0000007B 66 8C D0                        		MOV		AX,SS
   104 0000007E 8E D8                           		MOV		DS,AX
   105 00000080 8E C0                           		MOV		ES,AX
   106 00000082 E8 [00000000]                   		CALL	_inthandler21
   107 00000087 58                              		POP		EAX
   108 00000088 61                              		POPAD
   109 00000089 1F                              		POP		DS
   110 0000008A 07                              		POP		ES
   111 0000008B CF                              		IRETD
   112 0000008C                                 
   113 0000008C                                 _asm_inthandler27:
   114 0000008C 06                              		PUSH	ES
   115 0000008D 1E                              		PUSH	DS
   116 0000008E 60                              		PUSHAD
   117 0000008F 89 E0                           		MOV		EAX,ESP
   118 00000091 50                              		PUSH	EAX
   119 00000092 66 8C D0                        		MOV		AX,SS
   120 00000095 8E D8                           		MOV		DS,AX
   121 00000097 8E C0                           		MOV		ES,AX
   122 00000099 E8 [00000000]                   		CALL	_inthandler27
   123 0000009E 58                              		POP		EAX
   124 0000009F 61                              		POPAD
   125 000000A0 1F                              		POP		DS
   126 000000A1 07                              		POP		ES
   127 000000A2 CF                              		IRETD
   128 000000A3                                 
   129 000000A3                                 _asm_inthandler2c:
   130 000000A3 06                              		PUSH	ES
   131 000000A4 1E                              		PUSH	DS
   132 000000A5 60                              		PUSHAD
   133 000000A6 89 E0                           		MOV		EAX,ESP
   134 000000A8 50                              		PUSH	EAX
   135 000000A9 66 8C D0                        		MOV		AX,SS
   136 000000AC 8E D8                           		MOV		DS,AX
   137 000000AE 8E C0                           		MOV		ES,AX
   138 000000B0 E8 [00000000]                   		CALL	_inthandler2c
   139 000000B5 58                              		POP		EAX
   140 000000B6 61                              		POPAD
   141 000000B7 1F                              		POP		DS
   142 000000B8 07                              		POP		ES
   143 000000B9 CF                              		IRETD
   144 000000BA                                 
   145 000000BA                                 _load_cr0:   ;int load_cr0();
   146 000000BA 0F 20 C0                        	MOV EAX,CR0
   147 000000BD C3                              	RET
   148 000000BE                                 
   149 000000BE                                 _store_cr0:  ;void store_cr0(int cr0);
   150 000000BE 8B 44 24 04                     	MOV EAX,[ESP+4]
   151 000000C2 0F 22 C0                        	MOV CR0,EAX
   152 000000C5 C3                              	RET
   153 000000C6                                 
   154 000000C6                                 _memtest_sub:  ;unsigned int memtest_sub(unsigned int start,unsigned int end)
   155 000000C6 57                              	PUSH EDI
   156 000000C7 56                              	PUSH ESI
   157 000000C8 53                              	PUSH EBX
   158 000000C9 BE AA55AA55                     	MOV ESI,0xaa55aa55   ;pat0=0xaa55aa55
   159 000000CE BF 55AA55AA                     	MOV EDI,0x55aa55aa   ;pat1=0x55aa55aa
   160 000000D3 8B 44 24 10                     	MOV EAX,[ESP+12+4]   ;i=start
   161 000000D7                                 mts_loop:
   162 000000D7 89 C3                           	MOV EBX,EAX
   163 000000D9 81 C3 00000FFC                  	ADD EBX,0xffc		 ;p=i+0xffc
   164 000000DF 8B 13                           	MOV EDX,[EBX]        ;old=*p
   165 000000E1 89 33                           	MOV [EBX],ESI        ;*p=pat0
   166 000000E3 83 33 FF                        	XOR DWORD [EBX],0xffffffff	;*P^=0xffffffff
   167 000000E6 3B 3B                           	CMP EDI,[EBX]               ;if(*p!=pat1) goto fin
   168 000000E8 75 18                           	JNE mts_fin
   169 000000EA 83 33 FF                        	XOR DWORD [EBX],0xffffffff  ;*P^=0xffffffff
   170 000000ED 3B 33                           	CMP ESI,[EBX]               ;if(*p!=pat0) goto fin
   171 000000EF 75 11                           	JNE mts_fin
   172 000000F1 89 13                           	MOV [EBX],EDX               ;*p=old
   173 000000F3 05 00001000                     	ADD EAX,0x1000              ;i+=0x1000
   174 000000F8 3B 44 24 14                     	CMP EAX,[ESP+12+8]          ;if(i<=end) goto mts_loop
   175 000000FC 76 D9                           	JBE mts_loop
   176 000000FE 5B                              	POP EBX
   177 000000FF 5E                              	POP ESI
   178 00000100 5F                              	POP EDI
   179 00000101 C3                              	RET
   180 00000102                                 mts_fin:
   181 00000102 89 13                           	MOV [EBX],EDX              ;*p=old
   182 00000104 5B                              	POP EBX
   183 00000105 5E                              	POP ESI
   184 00000106 5F                              	POP EDI
   185 00000107 C3                              	RET
   186 00000108                                 	