     1 00000000                                 ;naskfunc
     2 00000000                                 ;TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]       ;设置使用指令的型号，即32位   写成INSERT了，半天没找出错误
     6 00000000                                 [BITS 32]
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                     GLOBAL _io_hlt,_io_cli,_io_sti,_io_stihlt           ;书上怎么stihlt前面少了个下划线
    11 00000000                                     GLOBAL _io_in8,_io_in16,_io_in32
    12 00000000                                     GLOBAL _io_out8,_io_out16,_io_out32
    13 00000000                                     GLOBAL _io_load_eflags,_io_store_eflags             ;函数声明前怎么都要加下划线
    14 00000000                                 
    15                                          [SECTION .text]         ;以下是实际的函数
    16 00000000                                 _io_hlt:
    17 00000000 F4                                  HLT
    18 00000001 C3                                  RET
    19 00000002                                 
    20 00000002                                 _io_cli:
    21 00000002 FA                                  CLI
    22 00000003 C3                                  RET
    23 00000004                                 
    24 00000004                                 _io_sti:
    25 00000004 FB                                  STI
    26 00000005 C3                                  RET
    27 00000006                                 
    28 00000006                                 _io_stihlt:
    29 00000006 FB                                  STI
    30 00000007 F4                                  HLT
    31 00000008 C3                                  RET
    32 00000009                                 
    33 00000009                                 _io_in8:
    34 00000009 8B 54 24 04                         MOV EDX,[ESP+4]
    35 0000000D B8 00000000                         MOV EAX,0
    36 00000012 EC                                  IN AL,DX
    37 00000013 C3                                  RET
    38 00000014                                 
    39 00000014                                 _io_in16:
    40 00000014 8B 54 24 04                         MOV EDX,[ESP+4]
    41 00000018 B8 00000000                         MOV EAX,0
    42 0000001D 66 ED                               IN AX,DX
    43 0000001F C3                                  RET
    44 00000020                                 
    45 00000020                                 _io_in32:
    46 00000020 8B 54 24 04                         MOV EDX,[ESP+4]
    47 00000024 B8 00000000                         MOV EAX,0
    48 00000029 66 ED                               IN AX,DX
    49 0000002B C3                                  RET
    50 0000002C                                 
    51 0000002C                                 _io_out8:
    52 0000002C 8B 54 24 04                         MOV EDX,[ESP+4]
    53 00000030 8A 44 24 08                         MOV AL,[ESP+8]
    54 00000034 EE                                  OUT DX,AL
    55 00000035 C3                                  RET
    56 00000036                                 
    57 00000036                                 _io_out16:
    58 00000036 8B 54 24 04                         MOV EDX,[ESP+4]
    59 0000003A 8B 44 24 08                         MOV EAX,[ESP+8]
    60 0000003E 66 EF                               OUT DX,AX
    61 00000040 C3                                  RET
    62 00000041                                 
    63 00000041                                 _io_out32:
    64 00000041 8B 54 24 04                         MOV EDX,[ESP+4]
    65 00000045 8A 44 24 08                         MOV AL,[ESP+8]
    66 00000049 EF                                  OUT DX,EAX
    67 0000004A C3                                  RET
    68 0000004B                                 
    69 0000004B                                 _io_load_eflags:
    70 0000004B 9C                                  PUSHFD                ;push flags double-word 等同于MOVE EAX,EFLAGS
    71 0000004C 58                                  POP EAX
    72 0000004D C3                                  RET                   ;EAX里面的值就被看成是返回值
    73 0000004E                                 
    74 0000004E                                 _io_store_eflags:
    75 0000004E 8B 44 24 04                         MOV EAX,[ESP+4]
    76 00000052 50                                  PUSH EAX
    77 00000053 9D                                  POPFD
    78 00000054 C3                                  RET