     1 00000000                                 ;naskfunc
     2 00000000                                 ;TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]       ;设置使用指令的型号，即32位   写成INSERT了，半天没找出错误
     6 00000000                                 [BITS 32]
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                     GLOBAL _io_hlt,_io_cli,_io_sti,_io_stihlt           ;书上怎么stihlt前面少了个下划线
    11 00000000                                     GLOBAL _io_in8,_io_in16,_io_in32
    12 00000000                                     GLOBAL _io_out8,_io_out16,_io_out32
    13 00000000                                     GLOBAL _io_load_eflags,_io_store_eflags             ;函数声明前怎么都要加下划线
    14 00000000                                 	GLOBAL	_load_gdtr, _load_idtr                      ;忘记加这两行了，出大问题
    15 00000000                                 	GLOBAL  _load_cr0,_store_cr0
    16 00000000                                 	GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c, _asm_inthandler20, _asm_inthandler0d
    17 00000000                                 	GLOBAL _memtest_sub
    18 00000000                                     EXTERN	_inthandler21, _inthandler27, _inthandler2c,_inthandler20
    19 00000000                                 	EXTERN	_inthandler0d
    20 00000000                                 	GLOBAL _load_tr
    21 00000000                                 	GLOBAL _taskswitch4,_taskswitch3
    22 00000000                                 	GLOBAL _farjmp,_farcall
    23 00000000                                 	GLOBAL _asm_console_putchar,_asm_hrb_api,_start_app
    24 00000000                                 	EXTERN	_console_putchar,_hrb_api
    25 00000000                                 
    26                                          [SECTION .text]         ;以下是实际的函数
    27 00000000                                 _io_hlt:
    28 00000000 F4                                  HLT
    29 00000001 C3                                  RET
    30 00000002                                 
    31 00000002                                 _io_cli:
    32 00000002 FA                                  CLI
    33 00000003 C3                                  RET
    34 00000004                                 
    35 00000004                                 _io_sti:
    36 00000004 FB                                  STI
    37 00000005 C3                                  RET
    38 00000006                                 
    39 00000006                                 _io_stihlt:
    40 00000006 FB                                  STI
    41 00000007 F4                                  HLT
    42 00000008 C3                                  RET
    43 00000009                                 
    44 00000009                                 _io_in8:
    45 00000009 8B 54 24 04                         MOV EDX,[ESP+4]
    46 0000000D B8 00000000                         MOV EAX,0
    47 00000012 EC                                  IN AL,DX
    48 00000013 C3                                  RET
    49 00000014                                 
    50 00000014                                 _io_in16:
    51 00000014 8B 54 24 04                         MOV EDX,[ESP+4]
    52 00000018 B8 00000000                         MOV EAX,0
    53 0000001D 66 ED                               IN AX,DX
    54 0000001F C3                                  RET
    55 00000020                                 
    56 00000020                                 _io_in32:
    57 00000020 8B 54 24 04                         MOV EDX,[ESP+4]
    58 00000024 B8 00000000                         MOV EAX,0
    59 00000029 66 ED                               IN AX,DX
    60 0000002B C3                                  RET
    61 0000002C                                 
    62 0000002C                                 _io_out8:
    63 0000002C 8B 54 24 04                         MOV EDX,[ESP+4]
    64 00000030 8A 44 24 08                         MOV AL,[ESP+8]
    65 00000034 EE                                  OUT DX,AL
    66 00000035 C3                                  RET
    67 00000036                                 
    68 00000036                                 _io_out16:
    69 00000036 8B 54 24 04                         MOV EDX,[ESP+4]
    70 0000003A 8B 44 24 08                         MOV EAX,[ESP+8]
    71 0000003E 66 EF                               OUT DX,AX
    72 00000040 C3                                  RET
    73 00000041                                 
    74 00000041                                 _io_out32:
    75 00000041 8B 54 24 04                         MOV EDX,[ESP+4]
    76 00000045 8A 44 24 08                         MOV AL,[ESP+8]
    77 00000049 EF                                  OUT DX,EAX
    78 0000004A C3                                  RET
    79 0000004B                                 
    80 0000004B                                 _io_load_eflags:          ;eflags是32位的，flag的扩充版
    81 0000004B 9C                                  PUSHFD                ;push flags double-word 等同于MOVE EAX,EFLAGS  指push eflags
    82 0000004C 58                                  POP EAX               ;计算机没有MOV EAX，EFLAGS这种指令
    83 0000004D C3                                  RET                   ;EAX里面的值就被看成是返回值
    84 0000004E                                 
    85 0000004E                                 _io_store_eflags:
    86 0000004E 8B 44 24 04                         MOV EAX,[ESP+4]
    87 00000052 50                                  PUSH EAX
    88 00000053 9D                                  POPFD
    89 00000054 C3                                  RET
    90 00000055                                 
    91 00000055                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 00000055 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 0000005A 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 0000005F 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 00000064 C3                              		RET
    96 00000065                                 
    97 00000065                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 00000065 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    99 0000006A 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 0000006F 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 00000074 C3                              		RET
   102 00000075                                 
   103 00000075                                 
   104 00000075                                 _asm_inthandler20:
   105 00000075 06                              		PUSH	ES
   106 00000076 1E                              		PUSH	DS
   107 00000077 60                              		PUSHAD
   108 00000078 89 E0                           		MOV		EAX,ESP
   109 0000007A 50                              		PUSH	EAX
   110 0000007B 66 8C D0                        		MOV		AX,SS
   111 0000007E 8E D8                           		MOV		DS,AX
   112 00000080 8E C0                           		MOV		ES,AX
   113 00000082 E8 [00000000]                   		CALL	_inthandler20
   114 00000087 58                              		POP		EAX
   115 00000088 61                              		POPAD
   116 00000089 1F                              		POP		DS
   117 0000008A 07                              		POP		ES
   118 0000008B CF                              		IRETD
   119 0000008C                                 
   120 0000008C                                 _asm_inthandler21:
   121 0000008C 06                              		PUSH	ES
   122 0000008D 1E                              		PUSH	DS
   123 0000008E 60                              		PUSHAD
   124 0000008F 89 E0                           		MOV		EAX,ESP
   125 00000091 50                              		PUSH	EAX
   126 00000092 66 8C D0                        		MOV		AX,SS
   127 00000095 8E D8                           		MOV		DS,AX
   128 00000097 8E C0                           		MOV		ES,AX
   129 00000099 E8 [00000000]                   		CALL	_inthandler21
   130 0000009E 58                              		POP		EAX
   131 0000009F 61                              		POPAD
   132 000000A0 1F                              		POP		DS
   133 000000A1 07                              		POP		ES
   134 000000A2 CF                              		IRETD
   135 000000A3                                 
   136 000000A3                                 _asm_inthandler27:
   137 000000A3 06                              		PUSH	ES
   138 000000A4 1E                              		PUSH	DS
   139 000000A5 60                              		PUSHAD
   140 000000A6 89 E0                           		MOV		EAX,ESP
   141 000000A8 50                              		PUSH	EAX
   142 000000A9 66 8C D0                        		MOV		AX,SS
   143 000000AC 8E D8                           		MOV		DS,AX
   144 000000AE 8E C0                           		MOV		ES,AX
   145 000000B0 E8 [00000000]                   		CALL	_inthandler27
   146 000000B5 58                              		POP		EAX
   147 000000B6 61                              		POPAD
   148 000000B7 1F                              		POP		DS
   149 000000B8 07                              		POP		ES
   150 000000B9 CF                              		IRETD
   151 000000BA                                 
   152 000000BA                                 _asm_inthandler2c:
   153 000000BA 06                              		PUSH	ES
   154 000000BB 1E                              		PUSH	DS
   155 000000BC 60                              		PUSHAD
   156 000000BD 89 E0                           		MOV		EAX,ESP
   157 000000BF 50                              		PUSH	EAX
   158 000000C0 66 8C D0                        		MOV		AX,SS
   159 000000C3 8E D8                           		MOV		DS,AX
   160 000000C5 8E C0                           		MOV		ES,AX
   161 000000C7 E8 [00000000]                   		CALL	_inthandler2c
   162 000000CC 58                              		POP		EAX
   163 000000CD 61                              		POPAD
   164 000000CE 1F                              		POP		DS
   165 000000CF 07                              		POP		ES
   166 000000D0 CF                              		IRETD
   167 000000D1                                 
   168 000000D1                                 _asm_inthandler0d:
   169 000000D1 FB                              		STI
   170 000000D2 06                              		PUSH	ES
   171 000000D3 1E                              		PUSH	DS
   172 000000D4 60                              		PUSHAD
   173 000000D5 89 E0                           		MOV		EAX,ESP
   174 000000D7 50                              		PUSH	EAX
   175 000000D8 66 8C D0                        		MOV		AX,SS
   176 000000DB 8E D8                           		MOV		DS,AX
   177 000000DD 8E C0                           		MOV		ES,AX
   178 000000DF E8 [00000000]                   		CALL	_inthandler0d
   179 000000E4 83 F8 00                        		CMP		EAX,0		
   180 000000E7 0F 85 000000A7                  		JNE		end_app		
   181 000000ED 58                              		POP		EAX
   182 000000EE 61                              		POPAD
   183 000000EF 1F                              		POP		DS
   184 000000F0 07                              		POP		ES
   185 000000F1 83 C4 04                        		ADD		ESP,4			; INT 0x0d需要这句
   186 000000F4 CF                              		IRETD
   187 000000F5                                 
   188 000000F5                                 _load_cr0:   ;int load_cr0();
   189 000000F5 0F 20 C0                        	MOV EAX,CR0
   190 000000F8 C3                              	RET
   191 000000F9                                 
   192 000000F9                                 _store_cr0:  ;void store_cr0(int cr0);
   193 000000F9 8B 44 24 04                     	MOV EAX,[ESP+4]
   194 000000FD 0F 22 C0                        	MOV CR0,EAX
   195 00000100 C3                              	RET
   196 00000101                                 
   197 00000101                                 _memtest_sub:  ;unsigned int memtest_sub(unsigned int start,unsigned int end)
   198 00000101 57                              	PUSH EDI
   199 00000102 56                              	PUSH ESI
   200 00000103 53                              	PUSH EBX
   201 00000104 BE AA55AA55                     	MOV ESI,0xaa55aa55   ;pat0=0xaa55aa55
   202 00000109 BF 55AA55AA                     	MOV EDI,0x55aa55aa   ;pat1=0x55aa55aa
   203 0000010E 8B 44 24 10                     	MOV EAX,[ESP+12+4]   ;i=start
   204 00000112                                 mts_loop:
   205 00000112 89 C3                           	MOV EBX,EAX
   206 00000114 81 C3 00000FFC                  	ADD EBX,0xffc		 ;p=i+0xffc
   207 0000011A 8B 13                           	MOV EDX,[EBX]        ;old=*p
   208 0000011C 89 33                           	MOV [EBX],ESI        ;*p=pat0
   209 0000011E 83 33 FF                        	XOR DWORD [EBX],0xffffffff	;*P^=0xffffffff
   210 00000121 3B 3B                           	CMP EDI,[EBX]               ;if(*p!=pat1) goto fin
   211 00000123 75 18                           	JNE mts_fin
   212 00000125 83 33 FF                        	XOR DWORD [EBX],0xffffffff  ;*P^=0xffffffff
   213 00000128 3B 33                           	CMP ESI,[EBX]               ;if(*p!=pat0) goto fin
   214 0000012A 75 11                           	JNE mts_fin
   215 0000012C 89 13                           	MOV [EBX],EDX               ;*p=old
   216 0000012E 05 00001000                     	ADD EAX,0x1000              ;i+=0x1000
   217 00000133 3B 44 24 14                     	CMP EAX,[ESP+12+8]          ;if(i<=end) goto mts_loop
   218 00000137 76 D9                           	JBE mts_loop
   219 00000139 5B                              	POP EBX
   220 0000013A 5E                              	POP ESI
   221 0000013B 5F                              	POP EDI
   222 0000013C C3                              	RET
   223 0000013D                                 mts_fin:
   224 0000013D 89 13                           	MOV [EBX],EDX              ;*p=old
   225 0000013F 5B                              	POP EBX
   226 00000140 5E                              	POP ESI
   227 00000141 5F                              	POP EDI
   228 00000142 C3                              	RET
   229 00000143                                 	
   230 00000143                                 
   231 00000143                                 _load_tr:                     ;void load_tr(int tr)  改变TR寄存器的值
   232 00000143 0F 00 5C 24 04                  	LTR [ESP+4]				  ;tr
   233 00000148 C3                              	RET
   234 00000149                                 
   235 00000149                                 _taskswitch4:                 ;void taskswitch(void)
   236 00000149 EA 00000000 0020                	JMP 4*8:0
   237 00000150 C3                              	RET
   238 00000151                                 
   239 00000151                                 _taskswitch3:				  ;void taskswitch3()
   240 00000151 EA 00000000 0018                	JMP 3*8:0
   241 00000158 C3                              	RET
   242 00000159                                 
   243 00000159                                 _farjmp:                      ;void farjmp(int eip,int cs);
   244 00000159 FF 6C 24 04                     	JMP FAR[ESP+4]            ;执行far跳转,在[ESP+4]存放了eip的值，[ESP+8]存放了cs的值
   245 0000015D C3                              	RET
   246 0000015E                                 
   247 0000015E                                 _asm_console_putchar:
   248 0000015E FB                              	STI    					;使用INT指令会被视作中断处理，采用RETF是无法返回的，需要用到IRETD
   249 0000015F 60                              	PUSHAD
   250 00000160 6A 01                           	PUSH 1
   251 00000162 25 000000FF                     	AND EAX,0xff			;将AH和EAX的高位置0，将EAX置为已存入字符编码的状态
   252 00000167 50                              	PUSH EAX
   253 00000168 FF 35 00000FEC                  	PUSH DWORD[0x0fec]		;读取内存并PUSH该值
   254 0000016E                                 	CALL _console_putchar 	；不能直接调用console_putchar，因为hlt.nas这个程序在汇编时并不包含操作系统本身的代码，因此编译器无法得知要调用的函数地址
      >> [ERROR #002] parameter error.
   255 0000016E 83 C4 0C                        	ADD ESP,12				;将栈中的数据丢弃
   256 00000171 61                              	POPAD
   257 00000172                                 	TRETD
   258 00000172                                 
   259 00000172                                 _farcall:					;void farcall(int eip,int cs)
   260 00000172 FF 5C 24 04                     	CALL FAR[ESP+4]			;eip，cs
   261 00000176 C3                              	RET
   262 00000177                                 
   263 00000177                                 _asm_hrb_api:
   264 00000177 FB                              	STI
   265 00000178 1E                              	PUSH	DS
   266 00000179 06                              	PUSH	ES
   267 0000017A 60                              	PUSHAD					; 用于保存PUSH
   268 0000017B 60                              	PUSHAD					; 用于向hrb_api传值的PUSH
   269 0000017C 66 8C D0                        	MOV 	AX,SS
   270 0000017F 8E D8                           	MOV		DS,AX			; 将操作系统用段存入DS和ES
   271 00000181 8E C0                           	MOV		ES,AX
   272 00000183 E8 [00000000]                   	CALL	_hrb_api
   273 00000188 83 F8 00                        	CMP		EAX,0			;当EAX不为0时程序结束
   274 0000018B 75 07                           	JNE		end_app
   275 0000018D 83 C4 20                        	ADD 	ESP,32
   276 00000190 61                              	POPAD
   277 00000191 07                              	POP		ES
   278 00000192 1F                              	POP		DS
   279 00000193 CF                              	IRETD	
   280 00000194                                 end_app:
   281 00000194                                 ; EAX为tss.esp0的地址
   282 00000194 8B 20                           	MOV		ESP,[EAX]
   283 00000196 61                              	POPAD
   284 00000197 C3                              	RET						;返回cmd_app
   285 00000198                                 
   286 00000198                                 ; 将PUSHAD后的值复制到系统栈
   287 00000198 8B 14 24                        	MOV		EDX,[ESP   ]
   288 0000019B 8B 5C 24 04                     	MOV		EBX,[ESP+ 4]
   289 0000019F 89 11                           	MOV		[ECX   ],EDX	; 复制传递给hrb_api
   290 000001A1 89 59 04                        	MOV		[ECX+ 4],EBX	; 复制传递给hrb_api
   291 000001A4 8B 54 24 08                     	MOV		EDX,[ESP+ 8]
   292 000001A8 8B 5C 24 0C                     	MOV		EBX,[ESP+12]
   293 000001AC 89 51 08                        	MOV		[ECX+ 8],EDX	; 复制传递给hrb_api
   294 000001AF 89 59 0C                        	MOV		[ECX+12],EBX	; 复制传递给hrb_api
   295 000001B2 8B 54 24 10                     	MOV		EDX,[ESP+16]
   296 000001B6 8B 5C 24 14                     	MOV		EBX,[ESP+20]
   297 000001BA 89 51 10                        	MOV		[ECX+16],EDX	; 复制传递给hrb_api
   298 000001BD 89 59 14                        	MOV		[ECX+20],EBX	; 复制传递给hrb_api
   299 000001C0 8B 54 24 18                     	MOV		EDX,[ESP+24]
   300 000001C4 8B 5C 24 1C                     	MOV		EBX,[ESP+28]
   301 000001C8 89 51 18                        	MOV		[ECX+24],EDX	; 复制传递给hrb_api
   302 000001CB 89 59 1C                        	MOV		[ECX+28],EBX	; 复制传递给hrb_api
   303 000001CE                                 
   304 000001CE 8E C0                           	MOV		ES,AX			; 将剩余的段寄存器也设定为操作系统用
   305 000001D0 8E D0                           	MOV		SS,AX
   306 000001D2 89 CC                           	MOV		ESP,ECX
   307 000001D4 FB                              	STI			; 恢复中断请求
   308 000001D5                                 
   309 000001D5 E8 [00000000]                   	CALL	_hrb_api
   310 000001DA                                 
   311 000001DA 8B 4C 24 20                     	MOV		ECX,[ESP+32]	; 取出应用程序的ESP
   312 000001DE 8B 44 24 24                     	MOV		EAX,[ESP+36]	; 取出应用程序的SS
   313 000001E2 FA                              	CLI
   314 000001E3 8E D0                           	MOV		SS,AX
   315 000001E5 89 CC                           	MOV		ESP,ECX
   316 000001E7 61                              	POPAD
   317 000001E8 07                              	POP		ES
   318 000001E9 1F                              	POP		DS
   319 000001EA CF                              	IRETD		; 这个命令会自动执行STI
   320 000001EB                                 
   321 000001EB                                 
   322 000001EB                                 _start_app:					;void start_app(int eip, int cs, int esp, int ds, int *tss_esp0)
   323 000001EB 60                              	PUSHAD					;将32位寄存器的值全部保存起来
   324 000001EC 8B 44 24 24                     	MOV		EAX,[ESP+36]		;应用程序用EIP
   325 000001F0 8B 4C 24 28                     	MOV		ECX,[ESP+40]		;应用程序用CS
   326 000001F4 8B 54 24 2C                     	MOV		EDX,[ESP+44]		;应用程序用ESP
   327 000001F8 8B 5C 24 30                     	MOV		EBX,[ESP+48]		;应用程序用DS/SS
   328 000001FC 8B 6C 24 34                     	MOV		EBP,[ESP+52]		;tss.esp0的地址
   329 00000200 89 65 00                        	MOV 	[EBP],ESP			;保存操作系统用ESP
   330 00000203 8C 55 04                        	MOV		[EBP+4],SS			;保存操作系统用SS
   331 00000206 8E C3                           	MOV		ES,BX
   332 00000208 8E DB                           	MOV 	DS,BX
   333 0000020A 8E E3                           	MOV 	FS,BX
   334 0000020C 8E EB                           	MOV		GS,BX
   335 0000020E                                 ;下面调整栈，以免用RETF跳转到应用程序
   336 0000020E 83 C9 03                        	OR 		ECX,3				;将应用程序用段号和3进行OR运算
   337 00000211 83 CB 03                        	OR		EBX,3				;将应用程序用段号和3进行OR运算
   338 00000214 53                              	PUSH	EBX					;应用程序的SS
   339 00000215 52                              	PUSH	EDX					;应用程序的ESP
   340 00000216 51                              	PUSH	ECX					;应用程序的CS
   341 00000217 50                              	PUSH    EAX					;应用程序的EIP
   342 00000218 CB                              	RETF						;应用程序结束后不会返回到这里